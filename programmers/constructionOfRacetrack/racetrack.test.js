const solution = (board) => {
  
  // const boardMinCost = JSON.parse(JSON.stringify(board)); //각각의 위치까지 갈 수 있는 최소비용을 넣어둠
  const boardMinCost = new Array(board.length).fill().map(v => new Array(board.length).fill(1000000)); //각각의 위치까지 갈 수 있는 최소비용을 넣어둠
  // console.log(boardMinCost)

  const dest = [board[0].length - 1, board.length - 1];

  const search = (curPos, pathList, checked) => {

    if (curPos[0] >= board[0].length || curPos[1] >= board.length || curPos[0] < 0 || curPos[1] < 0) {
      return;
    }

    if (checked[curPos[0]][curPos[1]] === 1) {
      return;
    }

    const cost = calculateCost(pathList)
    if (boardMinCost[curPos[0]][curPos[1]] < cost) {
      return;
    }

    boardMinCost[curPos[0]][curPos[1]] = cost;

    if (JSON.stringify(curPos) === JSON.stringify(dest)) {
      return;
    }

    const newChecked = JSON.parse(JSON.stringify(checked));
    newChecked[curPos[0]][curPos[1]] = 1;
    //오른쪽으로
    search([curPos[0], curPos[1] + 1], [...pathList, [curPos[0], curPos[1] + 1]], newChecked);

    //아래로
    search([curPos[0] + 1, curPos[1]], [...pathList, [curPos[0] + 1, curPos[1]]], newChecked);

    //위로
    search([curPos[0] - 1, curPos[1]], [...pathList, [curPos[0] - 1, curPos[1]]], newChecked)

    //왼쪽으로
    search([curPos[0], curPos[1] - 1], [...pathList, [curPos[0], curPos[1] - 1]], newChecked)
  }

  search([0, 0], [[0, 0]], board);
  return boardMinCost[board.length - 1][board.length - 1];
}

const calculateCost = (pathList) => {
  const result = [];
  for (let i = 1; i < pathList.length; i++) {
    if (pathList[i][1] - pathList[i - 1][1] === 1) {
      result.push('right');
    }
    if (pathList[i][1] - pathList[i - 1][1] === -1) {
      result.push('left');
    }
    if (pathList[i][0] - pathList[i - 1][0] === 1) {
      result.push('down');
    }
    if (pathList[i][0] - pathList[i - 1][0] === -1) {
      result.push('up');
    }
  }
  
  let cost = 100;
  for (let i = 1; i < result.length; i++) {
    cost += 100;
    if (result[i - 1] === 'right' && result[i] === 'down') {
      cost += 500;
    }
    if (result[i - 1] === 'right' && result[i] === 'up') {
      cost += 500;
    }
    if (result[i - 1] === 'left' && result[i] === 'down') {
      cost += 500;
    }
    if (result[i - 1] === 'left' && result[i] === 'up') {
      cost += 500;
    }
    if (result[i - 1] === 'up' && result[i] === 'left') {
      cost += 500;
    }
    if (result[i - 1] === 'up' && result[i] === 'right') {
      cost += 500;
    }
    if (result[i - 1] === 'down' && result[i] === 'left') {
      cost += 500;
    }
    if (result[i - 1] === 'down' && result[i] === 'right') {
      cost += 500;
    }
  }
  return cost;
}

test('solution', () => {
  expect(solution([[0, 0, 0], [0, 0, 0], [0, 0, 0]])).toBe(900);
  // expect(solution([[0, 0, 1], [0, 0, 0], [0, 0, 0]])).toBe(900);
  // expect(solution([[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0]])).toBe(3800);

  // expect(solution(
  //   [
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //   ]
  //   )).toBe(5300);
});

// [
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
// ]

test('calculateCost', () => {
  expect(calculateCost([[0, 0], [0, 1], [0, 2], [1, 2], [2, 2]])).toBe(900);
})